// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dgamma_rcpp
arma::colvec dgamma_rcpp(NumericVector x, double mu, double sigma);
RcppExport SEXP _moveHMM_dgamma_rcpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dgamma_rcpp(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dweibull_rcpp
arma::colvec dweibull_rcpp(NumericVector x, double shape, double scale);
RcppExport SEXP _moveHMM_dweibull_rcpp(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dweibull_rcpp(x, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// dlnorm_rcpp
arma::colvec dlnorm_rcpp(NumericVector x, double meanlog, double sdlog);
RcppExport SEXP _moveHMM_dlnorm_rcpp(SEXP xSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< double >::type sdlog(sdlogSEXP);
    rcpp_result_gen = Rcpp::wrap(dlnorm_rcpp(x, meanlog, sdlog));
    return rcpp_result_gen;
END_RCPP
}
// dexp_rcpp
arma::colvec dexp_rcpp(NumericVector x, double rate, double foo);
RcppExport SEXP _moveHMM_dexp_rcpp(SEXP xSEXP, SEXP rateSEXP, SEXP fooSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type foo(fooSEXP);
    rcpp_result_gen = Rcpp::wrap(dexp_rcpp(x, rate, foo));
    return rcpp_result_gen;
END_RCPP
}
// dparetoI_rcpp
arma::colvec dparetoI_rcpp(NumericVector x, double mu, double xmin);
RcppExport SEXP _moveHMM_dparetoI_rcpp(SEXP xSEXP, SEXP muSEXP, SEXP xminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    rcpp_result_gen = Rcpp::wrap(dparetoI_rcpp(x, mu, xmin));
    return rcpp_result_gen;
END_RCPP
}
// dvm_rcpp
arma::colvec dvm_rcpp(NumericVector x, double mu, double kappa);
RcppExport SEXP _moveHMM_dvm_rcpp(SEXP xSEXP, SEXP muSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(dvm_rcpp(x, mu, kappa));
    return rcpp_result_gen;
END_RCPP
}
// dwrpcauchy_rcpp
arma::colvec dwrpcauchy_rcpp(NumericVector x, double mu, double rho);
RcppExport SEXP _moveHMM_dwrpcauchy_rcpp(SEXP xSEXP, SEXP muSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(dwrpcauchy_rcpp(x, mu, rho));
    return rcpp_result_gen;
END_RCPP
}
// nLogLike_rcpp
double nLogLike_rcpp(int nbStates, arma::mat beta, arma::mat covs, DataFrame data, std::string stepDist, std::string angleDist, arma::mat stepPar, arma::mat anglePar, arma::rowvec delta, IntegerVector aInd, bool zeroInflation, bool stationary, IntegerVector knownStates);
RcppExport SEXP _moveHMM_nLogLike_rcpp(SEXP nbStatesSEXP, SEXP betaSEXP, SEXP covsSEXP, SEXP dataSEXP, SEXP stepDistSEXP, SEXP angleDistSEXP, SEXP stepParSEXP, SEXP angleParSEXP, SEXP deltaSEXP, SEXP aIndSEXP, SEXP zeroInflationSEXP, SEXP stationarySEXP, SEXP knownStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nbStates(nbStatesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covs(covsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type stepDist(stepDistSEXP);
    Rcpp::traits::input_parameter< std::string >::type angleDist(angleDistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stepPar(stepParSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type anglePar(angleParSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type aInd(aIndSEXP);
    Rcpp::traits::input_parameter< bool >::type zeroInflation(zeroInflationSEXP);
    Rcpp::traits::input_parameter< bool >::type stationary(stationarySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type knownStates(knownStatesSEXP);
    rcpp_result_gen = Rcpp::wrap(nLogLike_rcpp(nbStates, beta, covs, data, stepDist, angleDist, stepPar, anglePar, delta, aInd, zeroInflation, stationary, knownStates));
    return rcpp_result_gen;
END_RCPP
}
// trMatrix_rcpp
arma::cube trMatrix_rcpp(int nbStates, arma::mat beta, arma::mat covs);
RcppExport SEXP _moveHMM_trMatrix_rcpp(SEXP nbStatesSEXP, SEXP betaSEXP, SEXP covsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nbStates(nbStatesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covs(covsSEXP);
    rcpp_result_gen = Rcpp::wrap(trMatrix_rcpp(nbStates, beta, covs));
    return rcpp_result_gen;
END_RCPP
}
